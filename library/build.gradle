apply plugin: 'com.android.library'
apply plugin: 'jacoco'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-Werror"
            }
        }
    }
    buildTypes {
        debug {
            testCoverageEnabled getTestCoverageEnabled()
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

android.testOptions.unitTests.all {
    ignoreFailures false

    jacoco {
        includeNoLocationClasses = true
    }

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

dependencies {
    compile 'com.getkeepsafe.relinker:relinker:1.2.2'
    compile 'com.android.support:support-annotations:25.3.1'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
}

task jacocoTestReport(type: JacocoReport,
        dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Preconditions.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug",
            excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*.ec'
    ])
}

task createJavadocs(type: Javadoc) {
    source android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options {
        title = "JNIEnv"
        links "https://docs.oracle.com/javase/7/docs/api/"
        linksOffline "https://developer.android.com/reference/",
                "${project.android.sdkDirectory}/docs/reference"
    }
    failOnError false
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}

def getTestCoverageEnabled() {
    def testCoverageEnabled = false

    if (project.hasProperty("testCoverageEnabled")) {
        testCoverageEnabled = project.property("testCoverageEnabled").toBoolean()
    }

    println "Test Coverage Enabled: " + testCoverageEnabled

    return testCoverageEnabled
}
